#! /usr/bin/env bash

{

# utils

slog() {
    echo "
${BOLD}${GREEN}SEARTIPY: ${RESET} $1
"
}

err_exit() {
    echo "
${BOLD}${RED}FATAL: ${RESET} $1
"
    exit 1
}

has_cmd() {
    command -v "$1" > /dev/null
}


is_ubuntu() {
    has_cmd lsb_release || return 1
    local OS
    OS=$(lsb_release -i | cut -d ':' -f2)
    [[ "$OS" == *"Ubuntu" ]] || [[ "$OS" == *"neon" ]] || [[ "$OS" == *"elementary" ]] || [[ "$OS" == *"LinuxMint" ]] || [[ "$OS" == *"Pop" ]]
}

sclone() {
    local dest=${*: -1}
    local src=${*: -2:1}

    [ -d "$dest" ] && return 1

    slog "Cloning $src to $dest"
    git clone "$@"
}

smd() {
    [ -d "$1" ] && return 1

    slog "Creating directory $1"
    mkdir -p "$1" 2> /dev/null
}

fln() {
    if [ -e "$1" ]; then
        rm -f "$2"
    else
        echo "$1 does not exist, cannot create link $2"
        return 1
    fi
    slog "Creating link $2 to $1"
    ln -s "$1" "$2"
}

# essential

apti() {
    for p in "$@"; do
        slog "Installing package $p"
        sudo apt-get install -y "$p"
    done
}

essential_install() {

    apti software-properties-common apt-transport-https ca-certificates

    slog "Updating ubuntu"

    if ! { sudo apt-get update && sudo apt-get upgrade -y; }; then
        err_exit "apt-get update/upgrade failed, quitting"
    fi

    slog "Installing essential packages"
    apti curl wget git trash-cli tree fzf ripgrep p7zip build-essential
    apti tmux unar unzip libzmq3-dev pkg-config zip gawk urlview
    apti python-is-python3 zsh shellcheck git git-extras fasd
    apti zsh-syntax-highlighting zsh-autosuggestions fd-find zoxide exa
}

dotfiles_install() {
    sclone https://github.com/pervezfunctor/mini-dotfiles.git ~/.seartipy
}

# zsh

zsh_install() {
    slog "Installing zsh"

    smd ~/.zsh
    sclone https://github.com/sindresorhus/pure.git ~/.zsh/pure
    sclone https://github.com/djui/alias-tips.git ~/.zsh/alias-tips

    fln ~/.seartipy/zshrc ~/.zshrc
}

installer() {
    essential_install
    dotfiles_install
    zsh_install

    echo "Set zsh as your default shell(this sometimes fails)"
    chsh -s /bin/zsh

    echo "Installation done!"
}

keep_sudo_running() {
    sudo -v
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

is_ubuntu || err_exit "This installer works only on Ubuntu. Quitting."

curdir=$(pwd)

rm -f  ~/seartipy-error.log ~/seartipy-output.log 2> /dev/null

keep_sudo_running

smd ~/bin
export PATH="$HOME/bin:$PATH"

installer > >(tee ~/seartipy-output.log) 2> >(tee ~/seartipy-error.log >&2)

cd "$curdir"

}
