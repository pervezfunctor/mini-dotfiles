#! /usr/bin/env bash

{

DOT_DIR=~/.config/mini-seartipy

# utils

slog() {
    echo "
${BOLD}${GREEN}SEARTIPY: ${RESET} $1
"
}

err_exit() {
    echo "
${BOLD}${RED}FATAL: ${RESET} $1
"
    exit 1
}

has_cmd() {
    command -v "$1" > /dev/null
}

is_fedora() {
    grep 'Fedora' /etc/redhat-release > /dev/null || grep 'Rocky' /etc/redhat-release > /dev/null || grep 'Centos' /etc/redhat-release > /dev/null
}

sclone() {
    local dest=${*: -1}
    local src=${*: -2:1}

    [ -d "$dest" ] && return 1

    slog "Cloning $src to $dest"
    git clone "$@"
}

smd() {
    [ -d "$1" ] && return 1

    slog "Creating directory $1"
    mkdir -p "$1" 2> /dev/null
}

fln() {
    if [ -e "$1" ]; then
        rm -f "$2"
    else
        echo "$1 does not exist, cannot create link $2"
        return 1
    fi
    slog "Creating link $2 to $1"
    ln -s "$1" "$2"
}

srm() {
    if [ -e "$1" ]; then
        trash "$1"
    fi
}

fmv() {
    if [ -e "$1" ]; then
        trash "$2"
    fi
    mv "$1" "$2"
}

# essential

dnfi() {
    for p in "$@"; do
    slog "Installing package $p"
        sudo dnf -y install "$p"
    done
}

essential_install() {
    slog "Updating Rocky Linux"

    if ! { sudo dnf update -y && sudo dnf upgrade -y; }; then
        err_exit "dnf update/upgrade failed, quitting"
    fi

    slog "Installing essential rocky linux packages"

    sudo dnf config-manager --set-enabled crb
    dnfi epel-release

    dnfi curl wget git trash-cli tree fzf ripgrep tmux pkg-config urlview
    dnfi neovim zsh zsh-syntax-highlighting zsh-autosuggestions fd-find
    dnfi unar unzip p7zip zoxide ShellCheck git-extras zip gawk

    has_cmd snap && return 1

    slog "Installing snapd"
    dnfi snapd
    sudo systemctl enable --now snapd.socket
    [ -e /snap ] || sudo ln -s /var/lib/snapd/snap /snap
    sudo snap install fasd --beta
    sleep 5
    slog "snapd setup done!"
}

gh_install() {
    has_cmd gh && return 1

    slog "Installing up gh"

    dnfi 'dnf-command(config-manager)'
    sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
    dnfi gh

    slog "gh setup done!"
}

lazygit_install() {
    has_cmd lazygit && return 1

    slog "Installing lazygit"
    sudo dnf copr enable atim/lazygit -y
    sudo dnf install lazygit

    slog "lazygit installation done!"
}

gdu_install() {
    has_cmd gdu && return 1

    slog "Installing gdu"
    sudo dnf copr enable copr.fedorainfracloud.org/faramirza/gdu -y
    dnfi gdu
    slog "gdu installation done!"
}

bottom_install() {
    has_cmd bottom && return 1

    slog "Installing bottom"

    sudo dnf copr enable atim/bottom -y
    dnfi bottom

    slog "bottom installation done!"
}

pnpm_install() {
    has_cmd pnpm && return 0

    if has_cmd curl; then
        curl -fsSL https://get.pnpm.io/install.sh | sh -
    elif has_cmd wget; then
        wget -qO- https://get.pnpm.io/install.sh | sh -
    else
        echo "curl  or wget must be installed"
        return 1
    fi

    echo "Installing node"
    pnpm env use --global latest

    pnpm install-completion bash
    pnpm install-completion zsh
    pnpm install -g degit install tree-sitter-cli tldr gtop
    pnpm install -g @githubnext/github-copilot-cli

    slog "pnpm Installtion done!"
}

dotfiles_install() {
    sclone https://github.com/pervezfunctor/mini-dotfiles.git "${DOT_DIR}"
}

micro_install() {
    has_cmd micro && return 1

    slog "Installing micro"

    dnfi curl tar -y
    curl https://getmic.ro | bash
    sudo mv micro /usr/bin/

    slog "micro installation done!"
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    dnfi cockpit
    sudo systemctl enable --now cockpit.socket
    sudo firewall-cmd --add-service=cockpit
    sudo firewall-cmd --add-service=cockpit --permanent

    slog "cockpit installation done!"
}

docker_install() {
    has_cmd docker && return 1

    slog "Installing docker"

    dnfi dnf-plugins-core
    sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    dnfi docker-ce docker-ce-cli containerd.io docker-compose-plugin
    sudo systemctl --now enable docker

    slog "Setting up docker user group"
    sudo groupadd docker
    sudo usermod -aG docker $USER

    slog "Setting up docker service"
    sudo systemctl enable docker.service
    sudo systemctl enable containerd.service

    slog "docker installation done!"
}

astronvim_install() {
    slog "Installing AstroNvim"

    srm ~/.config/nvim.bak
    srm ~/.local/share/nvim.bak
    srm ~/.local/state/nvim.bak
    srm ~/.cache/nvim.bak

    fmv ~/.config/nvim ~/.config/nvim.bak
    fmv ~/.local/share/nvim ~/.local/share/nvim.bak
    fmv ~/.local/state/nvim ~/.local/state/nvim.bak
    fmv ~/.cache/nvim ~/.cache/nvim.bak

    git clone --depth 1 https://github.com/AstroNvim/AstroNvim ~/.config/nvim

    slog "AstroNvim installation done!"
}

cpp_install() {
    slog "Installing C++ tools"

    sudo dnf groupinstall "Development Tools" -y
    dnfi cmake gcc-c++ clang llvm boost clang-tools-extra pre-commit

    slog "C++ tools installation done!"
}

code_server_install() {
    has_cmd code-server && return 1

    slog "Installing code-server"
    curl -fsSL https://code-server.dev/install.sh | sh
    slog "code-server installation done!"

    # slog "Installing coder"
    # curl -L https://coder.com/install.sh | sh
    # slog "coder installation done!"
}
# zsh

zsh_install() {
    slog "Installing zsh"

    smd ~/.zsh
    sclone --depth=1 https://github.com/sindresorhus/pure.git ~/.zsh/pure
    sclone --depth=1 https://github.com/djui/alias-tips.git ~/.zsh/alias-tips

    fln "${DOT_DIR}/zshrc" ~/.zshrc

    slog "zsh installation done!"
}

installer() {
    essential_install
    dotfiles_install
    micro_install
    zsh_install
    cpp_install
    code_server_install
    docker_install
    cockpit_install
    gh_install
    lazygit_install
    gdu_install
    bottom_install
    pnpm_install
    astronvim_install

    echo "Set zsh as default"
    sudo chsh -s $(which zsh) $(whoami)

    slog "Installation done! Look at ~/.seartipy-error.log for any errors."
}

keep_sudo_running() {
    sudo -v
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

is_fedora || err_exit "This installer works only on Rocky Linux. Quitting."

curdir=$(pwd)

rm -f ~/.seartipy-error.log ~/.seartipy-output.log 2> /dev/null

slog "Installing..."

keep_sudo_running

smd ~/bin
export PATH="$HOME/bin:$PATH"
export DEBIAN_FRONTEND=noninteractive

installer > >(tee ~/.seartipy-output.log) 2> >(tee ~/.seartipy-error.log >&2)

cd "$curdir"

}
