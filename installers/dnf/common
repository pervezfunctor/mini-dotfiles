#! /usr/bin/env bash

{

dnfi() {
    for p in "$@"; do
    slog "Installing package $p"
        sudo dnf -y install "$p"
    done
}

essential_install() {
    slog "Updating packages"

    if ! { sudo dnf update -y && sudo dnf upgrade -y; }; then
        err_exit "dnf update/upgrade failed, quitting"
    fi

    slog "Installing essential packages"

    sudo dnf config-manager --set-enabled crb

    dnfi curl wget git trash-cli tree fzf ripgrep tmux pkg-config urlview
    dnfi neovim zsh zsh-syntax-highlighting zsh-autosuggestions fd-find
    dnfi unar unzip p7zip zoxide ShellCheck git-extras zip gawk
    dnfi python3-pip python3-virtualenv xclip xsel
}

snap_install() {
    has_cmd snap && return 1

    slog "Installing snapd"
    dnfi snapd
    sudo systemctl enable --now snapd.socket
    [ -e /snap ] || sudo ln -s /var/lib/snapd/snap /snap
    sleep 5

    sudo snap install fasd --beta

    slog "snapd setup done!"
}

gh_install() {
    has_cmd gh && return 1

    slog "Installing up gh"

    dnfi 'dnf-command(config-manager)'
    sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
    dnfi gh

    slog "gh setup done!"
}

cpp_install() {
    slog "Installing C++"

    sudo dnf groupinstall "Development Tools" -y
    dnfi cmake gcc-c++ clang llvm boost clang-tools-extra pre-commit

    has_cmd pip && pip install conan

    slog "C++ installation done!"
}


flathub_install() {
    has_cmd flatpak || return 1
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
}

lazygit_install() {
    has_cmd lazygit && return 1

    slog "Installing lazygit"
    sudo dnf copr enable atim/lazygit -y
    dnfi lazygit

    slog "lazygit installation done!"
}

gdu_install() {
    has_cmd gdu && return 1

    slog "Installing gdu"
    sudo dnf copr enable copr.fedorainfracloud.org/faramirza/gdu -y
    dnfi gdu
    slog "gdu installation done!"
}

bottom_install() {
    has_cmd bottom && return 1

    slog "Installing bottom"

    sudo dnf copr enable atim/bottom -y
    dnfi bottom

    slog "bottom installation done!"
}

neovim_install() {

}

vscode_install() {
    has_cmd code && return 1

    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    dnf check-update
    dnfi code code-insiders
}

cockpit_install() {
    has_cmd cockpit && return 1

    slog "Installing cockpit"

    dnfi cockpit
    sudo systemctl enable --now cockpit.socket
    sudo firewall-cmd --add-service=cockpit
    sudo firewall-cmd --add-service=cockpit --permanent

    slog "cockpit installation done!"
}

docker_install() {
    has_cmd docker && return 1

    slog "Installing docker"

    dnfi dnf-plugins-core
    sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    docker_common_install

    slog "docker installation done!"
}

}
