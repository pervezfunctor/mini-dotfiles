#! /usr/bin/env bash

{

apti() {
  for p in "$@"; do
    slog "Installing package $p"
    sudo apt-get -y install "$p"
  done
}

essential_install() {
  slog "Updating"

  if ! { sudo apt-get update && sudo apt-get upgrade -y; }; then
    err_exit "apt-get update/upgrade failed, quitting"
  fi

  apti software-properties-common apt-transport-https ca-certificates

  slog "Installing essential packages"
  apti curl wget git trash-cli tree fzf ripgrep nala
  apti tmux libzmq3-dev pkg-config urlview fasd fd-find
  apti zsh zsh-syntax-highlighting zsh-autosuggestions

  if is_ubuntu; then
    apti unar unzip p7zip build-essential zoxide exa
    apti python3 python3-pip python-is-python3 python3-venv
    apti shellcheck git-extras zip gawk gcc gh xclip xsel
  fi

  slog "Essential packages installation done!"
}

cpp_install() {
    slog "Installing C++"

    apti cmake g++ clang llvm libboost-all-dev clang-tidy clang-format clang-tools pre-commit

    has_cmd pip && pip install conan

    slog "C++ installation done!"
}

flathub_install() {
  apti flatpak
  flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
}

bottom_install() {
    has_cmd bottom && return 0

    slog "Installing bottom..."

    curl -LO https://github.com/ClementTsang/bottom/releases/download/0.9.6/bottom_0.9.6_amd64.deb
    sudo dpkg -i bottom_0.9.6_amd64.deb
    srm bottom_0.9.6_amd64.deb

    slog "Bottom installation done!"
}

neovim_install() {
    has_cmd nvim && return 0

    slog "Installing neovim..."

    curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
    chmod u+x nvim.appimage

    ./nvim.appimage --appimage-extract

    sudo mv squashfs-root /
    sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
    srm nvim.appimage

    has_cmd go && go install github.com/jesseduffield/lazygit@latest
    has_cmd go && go install github.com/dundee/gdu/v5/cmd/gdu@latest
    apti luarocks
    bottom_install

    if has_cmd pnpm; then
      pnpm install -g neovim
    elif has_cmd npm; then
      npm install -g neovim
    fi

    has_cmd pip && pip install neovim

    if has_cmd cargo; then
      cargo install tree-sitter-cli
    elif has_cmd pnpm; then
      pnpm install -g tree-sitter-cli
    elif has_cmd npm; then
      npm install -g tree-sitter-cli
    else
      slog "tree-sitter-cli not installed"
    fi

    slog "Neovim installation done!"
}

vscode_install() {
    has_cmd code && return 0

    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    sudo apt-get update
    apti code
}

docker_debian_install() {
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
}

docker_ubuntu_install() {
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
}

docker_install() {
  has_cmd docker && return 0

  slog "Installing docker..."

  sudo apt-get update
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  sudo chmod a+r /etc/apt/keyrings/docker.gpg

  is_ubuntu && docker_ubuntu_install
  is_debian && docker_debian_install

  sudo apt-get update
  apti docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  docker_common_install

  slog "Docker installation done!"
}

}
