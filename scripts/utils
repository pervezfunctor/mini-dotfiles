#! /usr/bin/env bash

{

DOT_DIR=~/.config/mini-seartipy

slog() {
    echo "
${BOLD}${GREEN}SEARTIPY: ${RESET} $1
"
}

err_exit() {
    echo "
${BOLD}${RED}FATAL: ${RESET} $1
"
    exit 1
}


dir_exists() {
    [[ -d "$1" ]]
}

file_exists() {
    [[ -f "$1" ]]
}

has_cmd() {
    command -v "$1" > /dev/null
}

sclone() {
    local dest=${*: -1}
    local src=${*: -2:1}

    [ -d "$dest" ] && return 1

    slog "Cloning $src to $dest"
    git clone "$@"
}

smd() {
    [ -d "$1" ] && return 1

    slog "Creating directory $1"
    mkdir -p "$1" 2> /dev/null
}

fln() {
    if [ -e "$1" ]; then
        rm -f "$2"
    else
        echo "$1 does not exist, cannot create link $2"
        return 1
    fi
    slog "Creating link $2 to $1"
    ln -s "$1" "$2"
}

srm() {
    if [ -e "$1" ]; then
        trash "$1"
    fi
}

fmv() {
    if [ -e "$1" ]; then
        trash "$2"
    fi
    mv "$1" "$2"
}


is_debian() {
    has_cmd lsb_release || return 1

    local OS
    OS=$(lsb_release -i | cut -d ':' -f2)
    [[ "$OS" == *"Debian" ]]
}

is_wsl() {
    grep -qi microsoft /proc/version
}

is_ubuntu() {
    has_cmd lsb_release || return 1
    local OS
    OS=$(lsb_release -i | cut -d ':' -f2)
    [[ "$OS" == *"Ubuntu" ]]
}

is_apt() {
    is_ubuntu || is_debian
}


is_fedora() {
   [ -e /etc/redhat-release ] && grep 'Fedora' /etc/redhat-release > /dev/null
}

is_rocky() {
    [ -e /etc/redhat-release ] && grep 'Rocky' /etc/redhat-release > /dev/null
}

is_centos() {
   [ -e /etc/redhat-release ] && grep 'Centos' /etc/redhat-release > /dev/null
}

is_rh() {
    is_fedora || is_rocky || is_centos
}

keep_sudo_running() {
    has_cmd sudo || err_exit "sudo must be installed"
    sudo -v
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

download_to() {
    if has_cmd curl; then
        curl -fsSL "$1" -o "$2"
    elif has_cmd wget; then
        wget "$1" -O "$2"
    else
        err_exit "curl or wget must be installed"
    fi
}

set_zsh_as_default() {
    slog "Setting zsh as default shell"
    sudo chsh -s $(which zsh) $(whoami)
}

git_core_install() {
    has_cmd git && return 1

    if has_cmd apt; then
        sudo apt-get install -y git-core
    elif has_cmd dnf; then
        sudo dnf install -y git-core
    elif has_cmd pacman; then
        sudo pacman -S --noconfirm git
    else
        err_exit "git must be installed"
    fi
}

dotfiles_install() {
    git_core_install
    sclone https://github.com/pervezfunctor/mini-dotfiles.git "${DOT_DIR}"
}

min_packages_for_installer() {
    if is_apt; then
        sudo apt-get install -y curl wget git-core trash-cli
    elif is_rh; then
        sudo dnf install -y curl wget git-core trash-cli
    else
        err_exit "This installer works only on Debian/Ubuntu or Fedora/Rocky/CentOS"
    fi
}

bootstrap() {
    export PATH="$HOME/bin:$PATH"
    export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
    export PNPM_HOME="$HOME/.local/share/pnpm"
    export PATH="$PNPM_HOME:$PATH"

    curdir=$(pwd)

    slog "Installing $1..."
    rm -f ~/.seartipy-error.log ~/.seartipy-output.log 2> /dev/null
    keep_sudo_running
    min_packages_for_installer
    source <(curl -fsSL https://raw.githubusercontent.com/pervezfunctor/mini-seartipy/master/scripts/installs)

    if has_cmd apt; then
        source <(curl -fsSL https://raw.githubusercontent.com/pervezfunctor/mini-seartipy/master/apt/common)
    elif has_cmd dnf; then
        source <(curl -fsSL https://raw.githubusercontent.com/pervezfunctor/mini-seartipy/master/dnf/common)
    fi

    main > >(tee ~/.seartipy-output.log) 2> >(tee ~/.seartipy-error.log >&2)

    slog "Installation done! Look at ~/.seartipy-error.log for any errors."

    cd "$curdir"
}

install_one() {
  if fn_exists "${1}_install"; then
    slog "Installing $1"
    "${1}_install"
  fi
}

install_all() {
  while [[ $# -gt 0 ]]; do
    install_one "$1"
    shift
  done
}

}
