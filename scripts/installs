#! /usr/bin/env bash

{

astro_install() {
    slog "Installing AstroNvim"

    fmv ~/.config/nvim ~/.config/nvim.bak
    fmv ~/.local/share/nvim ~/.local/share/nvim.bak
    fmv ~/.local/state/nvim ~/.local/state/nvim.bak
    fmv ~/.cache/nvim ~/.cache/nvim.bak

    shallo_clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim

    if $USER == "pervez"; then
        sclone https://github.com/pervezfunctor/astro-config.git ~/.config/nvim/lua/user
    elif ! dir_exists ~/.config/nvim/lua/user; then
        shallo_clone https://github.com/AstroNvim/user_example.git ~/.config/nvim/lua/user
        trash ~/.config/nvim/lua/user/.git
        slog "Please configure AstroNvim by editing files in ~/.config/nvim/lua/user"
    fi

    slog "AstroNvim installation done!"
}

code_server_install() {
    has_cmd code-server && return 1

    slog "Installing code-server"
    curl -s https://code-server.dev/install.sh | sh
    slog "code-server installation done!"

    # slog "Installing coder"
    # curl -L https://coder.com/install.sh | sh
    # slog "coder installation done!"
}

zsh_install() {
    slog "Installing zsh"

    smd ~/.zsh
    sclone --depth=1 https://github.com/sindresorhus/pure.git ~/.zsh/pure
    sclone --depth=1 https://github.com/djui/alias-tips.git ~/.zsh/alias-tips

    fln "${DOT_DIR}/configs/zshrc" ~/.zshrc

    slog "zsh installation done!"
}

micro_install() {
    has_cmd micro && return 1

    slog "Installing micro"

    curl https://getmic.ro | bash
    sudo mv micro /usr/bin/

    slog "micro installation done!"
}

rust_install() {
    has_cmd rustup && return 1

    slog "Installing rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    slog "rust installation done!"
}

miniconda_install() {
    has_cmd conda && return 0
    dir_exists ~/miniconda3 && return 0

    slog "Installing miniconda"

    smd ~/miniconda3
    download_to https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
    srm ~/miniconda3/miniconda.sh
    has_cmd bash && ~/miniconda3/bin/conda init bash
    has_cmd zsh && ~/miniconda3/bin/conda init zsh

    slog "miniconda installation done!"
}

pnpm_install() {
    # has_cmd pnpm && return 0

    slog "Installing pnpm"
    curl -s https://get.pnpm.io/install.sh | sh -

    slog "Installing node"
    pnpm env use --global latest

    pnpm install-completion bash
    pnpm install-completion zsh

    slog "Installing npm packages globally"
    pnpm install -g npm-check-updates degit tldr gtop ndb @antfu/ni
    pnpm install -g tsx vite-node zx turbo
    pnpm install -g @githubnext/github-copilot-cli
    if ! grep "fs.inotify.max_user_watches" /etc/sysctl.conf > /dev/null; then
        echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf > /dev/null && sudo sysctl -p
    fi

    if is_apt; then
        pnpm dlx playwright install-deps
        pnpm dlx playwright install
    fi
}

brew_install() {
    has_cmd brew && return 0

    slog "Installing homebrew"
    /bin/bash -c "$(curl -s https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    slog "homebrew installation done!"
}

monaspace_install() {
    wget https://github.com/githubnext/monaspace/releases/download/v1.000/monaspace-v1.000.zip
    unzip -d monaspace monaspace-v1.000.zip
    smd ~/.local/share/fonts
    # TODO: Don't copy if already exists
    cp ./monaspace/monaspace-v1.000/fonts/otf/* ~/.local/share/fonts
    cp ./monaspace/monaspace-v1.000/fonts/variable/* ~/.local/share/fonts
    trash monaspace monaspace-v1.000.zip
}

nerd_font_install() {
    wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/CascadiaMono.zip
    unzip -d monaspace CascadiaMono.zip
    cp ./monaspace/*.ttf .local/share/fonts
    trash monaspace CascadiaMono.zip

    wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/Monaspace.zip
    unzip -d monaspace Monaspace.zip
    cp ./monaspace/*.otf .local/share/fonts
    trash monaspace Monaspace.zip
}

fonts_install() {
    slog "Installing fonts"

    monaspace_install
    nerd_font_install

    if is_apt; then
        apti fonts-cascadia-code fonts-jetbrains-mono
    elif is_rh; then
        dnfi cascadia-fonts-all jetbrains-mono-fonts-all
    fi

    slog "Fonts installation done!"
}

lxd_install() {
    has_cmd snap || err_exit "for installing lxd, snap must be installed"
    has_cmd lxd && return 1

    slog "Installing lxd"

    sudo snap install lxd

    slog "Setting up lxd service"
    sudo snap enable lxd
    sudo snap services lxd

    slog "Setting up lxd user group"
    sudo usermod -a -G lxd $USER
    id $USER
    slog "lxd installation done! Start using it right now with `newgrp lxd`, followed by `lxd init`"
}

doom_install() {
    dir_exists ~/.config/emacs && return 1

    sclone --depth=1 https://github.com/doomemacs/doomemacs ~/.config/emacs
    mv ~/.config/doom ~/.config/doom.backup
    sclone https://github.com/pervezfunctor/doomemacs-config ~/.config/doom

    has_cmd update-locale && sudo update-locale LANG=en_US.UTF8
}

emacs_install() {
    slog "Installing emacs"

    doom_install

    if is_apt; then
      apti -y emacs
    elif is_rh; then
        dnfi emacs
    fi

    slog "emacs installation done!"
}

git_config() {
    is_wsl && git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/bin/git-credential-manager-core.exe"

    git config --global init.defaultBranch main
    git config --global pull.ff only

    if $USER == "pervez"; then
        git config --global user.name "Pervez Iqbal"
        git config --global user.email "pervefunctor@gmail.com"
    fi
}

go_install() {
    has_cmd go && return 1

    slog "Installing go"
    srm /usr/local/go && tar -C /usr/local -xzf go1.21.6.linux-amd64.tar.gz
    slog "go installation done!"
}

docker_common_install() {
  sudo groupadd docker
  sudo usermod -aG docker ${USER}

  sudo systemctl --now enable docker
  sudo systemctl --now enable containerd
}

}
